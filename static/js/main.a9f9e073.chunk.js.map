{"version":3,"sources":["components/FoodItemList.js","components/EditFoodItemForm.js","components/AddFoodItemForm.js","App.js","serviceWorker.js","index.js"],"names":["FoodItemList","props","className","foodItems","length","map","foodItem","key","id","food","cost","onClick","editFoodItem","deleteFoodItem","boughtFoodItem","status","colSpan","EditFoodItemForm","type","name","value","onChange","handleInputChange","updateFoodItem","setEditing","AddFoodItemForm","onSubmit","addFoodItem","App","state","userId","editing","bind","event","preventDefault","target","this","setState","filter","item","console","log","updatedFood","updatedCost","updatedFoodItem","currentFoodItem","updatedCurrentFood","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a9f9e073.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst FoodItemList = (props) => {\r\n    return (\r\n        <table className=\"table table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Id</th>\r\n                    <th>Food</th>\r\n                    <th>Cost</th>\r\n                    <th>Actions</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    props.foodItems.length > 0 ? (\r\n                        props.foodItems.map((foodItem) => (\r\n                            <tr key={foodItem.id}>\r\n                                <td>{foodItem.id}</td>\r\n                                <td>{foodItem.food}</td>\r\n                                <td>{foodItem.cost}</td>\r\n                                <td>\r\n                                    <button className=\"btn btn-primary ml-2\" onClick={() => props.editFoodItem(foodItem)}>Edit</button>\r\n                                    <button className=\"btn btn-danger ml-2\" onClick={() => props.deleteFoodItem(foodItem.id)}>Delete</button>\r\n                                    <button className=\"btn btn-info ml-2\" onClick={() => props.boughtFoodItem(foodItem)}>{foodItem.status ? 'True-bought' : 'False-pending'}</button>\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                      )\r\n\r\n                    ) : (\r\n                            <tr>\r\n                                <td colSpan={4}>No Food for a lazy man</td>\r\n                            </tr>\r\n                        )\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default FoodItemList;","import React from 'react';\r\n\r\nconst EditFoodItemForm = (props) => {\r\n    return (\r\n        <form className=\"col-sm-4\">\r\n            <div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"text-white\">Food name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"food\"\r\n                        value={props.food}\r\n                        onChange={props.handleInputChange}\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"text-white\">Food cost</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"cost\"\r\n                        value={props.cost}\r\n                        onChange={props.handleInputChange}\r\n                    />\r\n                </div>\r\n                <button  className=\"btn btn-primary btn-block\" onClick={props.updateFoodItem}>Update</button>\r\n                <button  className=\"btn btn-primary btn-block\" onClick={()=>props.setEditing(false)}>Cancel</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default EditFoodItemForm;","import React from 'react';\r\n\r\nconst AddFoodItemForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.addFoodItem} className=\"col-sm-4\">\r\n            <div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"text-white\">Food Name</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        name=\"food\"\r\n                        value={props.food}\r\n                        onChange={props.handleInputChange}\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label className=\"text-white\">Food Cost</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        name=\"cost\"\r\n                        value={props.cost}\r\n                        onChange={props.handleInputChange}\r\n                        className=\"form-control\"\r\n                    />\r\n                </div>\r\n                <button className=\"btn btn-primary btn-block\">Add Food Item</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddFoodItemForm;","import React, { Component } from 'react';\nimport './App.css';\nimport FoodItemList from './components/FoodItemList';\nimport EditFoodItemForm from './components/EditFoodItemForm';\nimport AddFoodItemForm from './components/AddFoodItemForm';\n\nclass App extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      id: null,\n      userId: 1,\n      food: '',\n      cost: '',\n      status: false,\n      foodItem: {},\n      foodItems: [\n        { id: 1, userId: 1, food: 'Rice', cost: 100, status: false },\n        { id: 2, userId: 1, food: 'Beans', cost: 200, status: true }\n      ],\n      editing: false\n    }\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.addFoodItem = this.addFoodItem.bind(this)\n    this.deleteFoodItem = this.deleteFoodItem.bind(this)\n    this.editFoodItem = this.editFoodItem.bind(this)\n    this.updateFoodItem = this.updateFoodItem.bind(this)\n    this.boughtFoodItem = this.boughtFoodItem.bind(this)\n  }\n\n  handleInputChange(event) {\n    event.preventDefault();\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    })\n  }\n\n  addFoodItem(event) {\n    event.preventDefault();\n    if (!this.state.food) return;\n    const foodItem = {\n      id: this.state.foodItems.length + 1,\n      food: this.state.food,\n      cost: this.state.cost,\n      userId: this.state.userId,\n      status: this.state.status\n    }\n    this.setState({\n      food: '',\n      cost: '',\n      foodItem: foodItem,\n      foodItems: [...this.state.foodItems, foodItem]\n\n    })\n  }\n\n  deleteFoodItem(id) {\n    const foodItems = this.state.foodItems.filter(item => item.id !== id);\n    this.setState({\n      foodItems: foodItems,\n      food: '',\n      cost: ''\n\n    });\n  }\n\n  editFoodItem(foodItem) {\n    console.log({...foodItem})\n    this.setEditing(true)\n    this.setState({\n      food: foodItem.food,\n      cost: foodItem.cost,\n      foodItem: foodItem\n    })\n  }\n\n  setEditing(value) {\n    if (typeof value !== 'boolean') {\n      throw \"This value must either be true or false\"\n    }\n    this.setState({\n      editing: value\n    })\n  }\n\n  updateFoodItem(event) {\n    event.preventDefault();\n    const updatedFood = this.state.food\n    const updatedCost = this.state.cost\n    console.log(updatedFood+\"--\"+updatedCost)\n    const updatedFoodItem = {...this.state.foodItem, cost: updatedCost, food: updatedFood}\n    const foodItems = this.state.foodItems.map((foodItem) =>\n      (foodItem.id === this.state.foodItem.id ? updatedFoodItem : foodItem));\n    this.setState({\n      foodItems: foodItems,\n      food: '',\n      cost: '',\n      editing:false\n    })\n  }\n\n\n  boughtFoodItem(currentFoodItem) {\n    const updatedCurrentFood = {...currentFoodItem, status: true};\n    console.log(updatedCurrentFood)\n    const foodItems = this.state.foodItems.map((foodItem) => \n      (foodItem.id === currentFoodItem.id ? updatedCurrentFood : foodItem));\n    //console.log(foodItems)\n    this.setState({foodItems: foodItems})\n  }\n\n\n  render() {\n    const { cost, food, foodItems, editing } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"row App-main\">\n          <FoodItemList\n            foodItems={foodItems}\n            deleteFoodItem={this.deleteFoodItem}\n            boughtFoodItem={this.boughtFoodItem}\n            editFoodItem={this.editFoodItem}\n          />\n        </div>\n\n        <div className=\"row App-main\">\n          {\n            editing ? (\n              <EditFoodItemForm\n                food={food}\n                cost={cost}\n                handleInputChange={this.handleInputChange}\n                setEditing={this.setEditing}\n                updateFoodItem={this.updateFoodItem}\n              />\n            ) : (\n                <AddFoodItemForm\n                  food={food}\n                  cost={cost}\n                  handleInputChange={this.handleInputChange}\n                  addFoodItem={this.addFoodItem}\n                />\n              )\n          }\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}